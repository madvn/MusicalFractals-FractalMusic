#####################################################
#                                                   #
# Music21 - Madhavun Candadai                       #
# Create score from note list and create musicXML   #
#                                                   #
#####################################################
def cls():
    for i in range(1,40):
        print

cls()


from music21 import *

def assignNote(x):
    return {
        26: 'g3',
        36: 'c#5',
        37: 'd5',
        32: 'f#4',
        33: 'g4',
        24: 'e3',
        30: 'd4',
        35: 'b4',
    }[x]

def assignDuration(x):
	return {
		26: 'quarter',
		36: 'eighth',
		37: 'eighth',
		32: 'eighth',
		33: 'eighth',
		24: 'eighth',
		30: 'quarter',
		35: 'eighth'
	}[x]

#score = [26,33,37,33,35,26,33,30,32,26,26,35,37,33,36,36,35,35,0,26,26,32,35,35,32,35,33,30,35,26,26,30,33,35,32,35,26,26,35,35,36,33,26,35,0,35,24,35,36,33,35,35,30,33,30,35,33,33,0,36,30,36,35,35,33,24,30,35,24,35,33,32,35,30,35,24,33,0,33,26,35,26,33,33,36,33,30,33,35,32,30,30,33,24,33,33,33,30,36,24,26,36,26,26,30,32,30,33,33,36,35,30,36,32,35,32,30,26,24,32,35,30,30,32,33,32,36,35,32,0,30,26,35,0,33,33,32,24,33,35,33,32,35,32,26,0,30,35,30,30,32,33,33,24,33,30,26,33,32,24,26,35,24,36,30,30,26,26,33,26,30,35,30,0,33,26,36,35,26,37,30,37,24,35,33,33,32,30,37,26,0,30,26,35,33,24,30,36,35,33,32,30,35,32,26,30,35,30,30,26,26,36,33,33,37,26,30,33,36,26,36,24,30,37,26,33,33,26,30,30,37,30,26,24,36,36,32,33,24,33,30,30,37,33,26,30,30,37,36,33,33,30,33,26,32,30,37,36,32,33,33,26,36,30,36,30,33,26,24,30,33,30,32,30,30,36,30,33,0,30,33,33,37,26,37,0,26,36,36,33,30,30,33,26,26,33,30,33,37,36,33,26,26,0,33,26,32,32,24,33,35,36,37,36,36,37,30,35,30,37,26,30,37,36,24,24,30,24,37,33,37,30,32,36,35,36,37,37,26,36,30,26,33,32,33,32,36,33,37,26,33,26,33,30,37,26,30,37,33,33,36,26,26,36,26,24,36,30,26,32,37,30,26,24,35,37,26,24,37,35,32,26,26,24,36,0,37,26,30,32,33,26,26,26,30,33,37,36,30,32,32,0,37,26,26,36,0,26,32,26,33,36,35,37,26,30,26,26,32,35,30,36,33,37,26,36,24,30,33,37,26,37,30,32,24,36,32,26,36,26,33,32,37,26,37,37,30,30,33,35,36,35,37,0,33,33,26,30,37,26,33,37,36,37,30,24,30,26,0,37,32,37,32,36,36,30,33,35,37,37,26,32,26,30,37,33,26,26,33,32,37,30,24,33,30,30,36,37,36,36,26,24,33,35,26,37,30,30,32,33,36,37,37,24,37,30,33,26,37,30,36,33,26,30,30,33,30,35,30,33,26,26,30,30,32,36,0,37,26,32,30,0,26,24,37,32,32,30,26,24,35,35,33,26,30,30,30,35,30,24,26,30,26,26,37,37,32,33,30,33,37,35,32,26,24,30,30,37,35,37,33,30,30,26,32,26,30,30,24,24,26,33,33,30,30,30,26,36,30,33,37,24,32,33,35,30,30,30,30,30,30,33,33,33,24,30,26,35,37,24,32,36,37,33,33,30,32,24,35,32,35,33,37,32,36,37,33,37,32,24,0,33,32,35,24,36,24,30,33,30,33,37,30,33,35,35,30,33,24,33,32,37,26,36,30,32,35,35,32,30,33,33,32,32,24,33,26,35,32,30,26,35,26,37,36,32,30,35,32,24,33,26,26,35,30,26,32,0,32,35,30,26,0,24,35,36,30,33,35,35,30,30,37,32,35,33,24,33,35,30,30,36,35,32,32,35,37,33,33,30,32,33,24,32,37,32,32,30,26,37,37,33,24,32,35,30,33,33,35,36,33,26,30,32,24,32,32,24,37,30,26,33,32,0,37,32,30,0,33,32,0,32,35,30,32,33,24,35,37,33,30,26,32,32,0,30,37,30,26,33,32,32,24,37,30,32,26,30,35,32,30,26,26,33,30,30,35,32,33,30,30,30,35,32,26,30,26,32,30,33,30,26,35,32,30,30,33,26,26,30,30,26,35,33,24,30,33,30,37,26,30,32,33,33,30,35,35,24,30,30,36,32,30,33,30,30,30,32,26,30,30,30,30,30,30,26,35,33,30,33,33,30,24,26,0,26,33,26,30,30,35,33,33,26,30,33,30,30,26,26,26,26,30,26,33,24,36,26,26,35,33,37,32,35,26,0,26,33,26,35,35,32,35,26,33,37,0,35,33,35,30,32,33,0,36,26,32,33,33,35,30,26,26,35,30,33,35,37,33,33,33,30,37,26,32,33,35,36,35,33,26,33,0,26,33,33,33,33,30,35,35,33,35,33,26,36,30,0,33,30,26,33,35,32,30,35,26,26,33,30,26,37,35,26,33,24,33,35,26,26,33,32,33,30,35,26,33,30,26,26]
score = [36,30,33,35,32,36,37,33,35,0,24,33,35,35,32,36,37,33,36,35,26,36,37,33,30,26,33,36,33,33,26,26,24,35,33,30,36,32,35,33,37,26,35,26,33,33,35,33,36,36,33,26,33,36,26,32,26,24,36,26,32,36,24,33,33,35,26,26,33,26,26,33,26,32,37,37,37,26,26,26,33,36,33,35,32,36,33,24,33,0,26,37,24,35,30,33,26,30,37,35,26,30,26,33,33,30,26,35,24,26,37,37,37,35,24,35,26,35,26,36,32,33,33,24,37,35,33,26,26,33,35,36,36,33,37,33,26,35,32,26,33,33,26,35,36,26,33,35,30,0,26,35,35,30,24,35,35,33,36,33,26,35,37,26,0,26,26,32,33,32,26,33,26,26,26,33,35,26,33,0,33,26,35,35,33,30,37,26,26,36,26,0,26,26,36,26,33,26,32,33,33,36,33,37,36,0,33,32,33,33,33,35,0,37,36,35,32,33,36,33,35,36,33,33,36,26,37,30,24,35,26,36,0,33,33,33,30,35,37,36,37,35,35,26,26,36,36,33,33,33,30,36,26,33,33,26,26,36,33,36,36,35,33,33,33,35,35,26,30,33,35,35,33,36,26,32,35,35,36,32,35,35,37,33,37,33,36,35,33,30,26,33,36,35,33,35,33,36,26,37,33,35,32,0,33,30,33,35,26,33,26,26,33,36,30,37,37,35,33,37,26,33,32,30,35,33,33,26,30,37,35,26,30,33,35,30,32,32,26,30,30,35,33,35,26,35,30,33,30,26,35,30,35,30,30,33,30,30,33,35,24,33,37,30,37,30,26,35,26,35,30,33,33,35,30,37,37,35,26,35,26,30,35,26,33,30,30,35,26,30,30,37,30,30,35,30,30,35,26,36,33,37,26,30,30,37,0,26,35,30,33,33,26,26,33,26,30,37,26,30,0,30,35,30,35,30,30,36,26,37,37,0,33,33,26,30,26,33,33,0,30,26,37,30,33,30,30,26,35,37,32,30,37,33,26,33,30,30,37,26,33,33,30,33,30,35,30,35,30,30,33,30,26,30,37,30,33,33,37,32,35,35,30,33,36,30,32,26,33,30,30,26,35,32,35,30,33,33,35,26,32,33,33,35,26,35,30,30,35,32,33,32,35,0,37,33,33,36,26,33,26,32,32,24,30,26,0,37,0,35,30,33,32,26,35,35,24,37,30,33,37,30,35,33,26,30,26,33,33,32,26,32,26,33,32,30,37,37,26,26,35,30,0,35,33,26,35,35,30,37,0,32,30,35,33,30,35,35,37,30,30,32,33,30,32,37,35,33,36,35,24,33,30,24,30,33,30,30,0,37,36,30,33,32,26,32,24,30,33,35,32,30,26,0,30,32,26,35,33,37,33,33,30,24,0,26,35,26,32,33,30,24,33,32,32,33,24,30,30,37,33,37,32,30,30,24,30,30,32,30,24,26,37,30,37,32,30,30,33,32,37,30,26,30,30,30,33,32,30,30,24,33,30,30,30,33,30,30,30,26,30,30,32,37,30,33,30,37,33,32,30,30,33,35,36,30,30,32,36,26,37,30,32,32,36,30,35,0,36,30,30,36,30,24,32,35,35,33,32,26,36,24,30,33,32,32,0,26,24,26,32,32,26,32,36,30,33,35,0,26,30,24,24,32,26,30,33,32,36,32,32,26,30,30,32,36,30,24,32,35,24,26,35,30,36,30,26,32,30,33,32,24,30,33,32,30,24,26,37,33,36,24,32,0,32,37,32,30,26,30,30,24,33,32,37,32,33,33,30,32,33,36,33,30,32,24,32,26,30,33,30,32,33,30,24,32,37,0,33,32,24,33,30,32,32,33,33,32,24,26,24,33,32,32,26,26,30,37,37,24,0,33,30,24,32,37,24,26,33,0,32,24,37,24,32,30,24,32,24,33,37,32,33,24,35,37,30,33,24,24,30,32,26,24,30,33,32,24,24,24,32,37,33,26,26,33,33,36,26,0,30,26,26,33,26,26,26,24,32,30,26,33,36,33,30,24,33,37,24,33,26,32,30,24,36,32,33,30,33,32,26,30,24,30,26,33,37,26,26,26,26,32,32,26,35,24,26,32,26,36,26,0,32,26,36,33,26,30,32,26,0,37,36,24,33,36,26,33,26,37,32,26,36,33,33,37,32,24,36,33,30,36,26,32,30,36,26,36,32,26,26,26,33,33,35,37,35,32,33,33,36,26,24,36,36,36,30,32,26,35]
print len(score)

data = []
for i in score:
	data.append((assignNote(score[i]),assignDuration(score[i])))

#print data
l = []
#data1 = [('aas','bsdf'),('fasf','rasdf')]
partUpper = stream.Part()
for mData in data:
    m = stream.Measure()
    n = note.Note(mData[0])
    n.duration.type = mData[1]
    m.append(n)
    partUpper.append(m)

partUpper.show()